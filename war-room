<html lang="en" class="h-full"><head><meta http-equiv="x-dns-prefetch-control" content="off"><meta name="x-poe-datastore-behavior" content="disabled"><meta name="x-poe-allow-downloads" content="true"><script src="https://puc.poecdn.net/standard.25f6d5ebb7608dc2f276.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WAR ROOM Order Trend Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#5D5CDE',
                    }
                }
            },
            darkMode: 'class'
        }
    </script>
<script src="https://puc.poecdn.net/disableWebRTC.9710cebe07429a9e8e06.js"></script><script src="https://puc.poecdn.net/miniApp.28c0df0532f03ce83e5d.js"></script><script src="https://puc.poecdn.net/console.0006988603ad6bbff4a0.js"></script><script src="https://puc.poecdn.net/interceptAndBubbleLinkClicks.1d60424eba93438b5bc6.js"></script><style>*, ::before, ::after{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }/* ! tailwindcss v3.4.16 | MIT License | https://tailwindcss.com */*,::after,::before{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}::after,::before{--tw-content:''}:host,html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-family:ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;font-feature-settings:normal;font-variation-settings:normal;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;letter-spacing:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button,input:where([type=button]),input:where([type=reset]),input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]:where(:not([hidden=until-found])){display:none}.fixed{position:fixed}.right-4{right:1rem}.top-4{top:1rem}.z-50{z-index:50}.mx-auto{margin-left:auto;margin-right:auto}.mb-2{margin-bottom:0.5rem}.mb-4{margin-bottom:1rem}.mb-8{margin-bottom:2rem}.ml-3{margin-left:0.75rem}.mt-1{margin-top:0.25rem}.mt-2{margin-top:0.5rem}.block{display:block}.flex{display:flex}.grid{display:grid}.hidden{display:none}.h-12{height:3rem}.h-4{height:1rem}.h-5{height:1.25rem}.h-full{height:100%}.min-h-full{min-height:100%}.w-12{width:3rem}.w-4{width:1rem}.w-5{width:1.25rem}.w-full{width:100%}.max-w-7xl{max-width:80rem}.flex-shrink-0{flex-shrink:0}.list-disc{list-style-type:disc}.grid-cols-1{grid-template-columns:repeat(1, minmax(0, 1fr))}.items-end{align-items:flex-end}.items-center{align-items:center}.justify-between{justify-content:space-between}.gap-4{gap:1rem}.gap-6{gap:1.5rem}.space-x-2 > :not([hidden]) ~ :not([hidden]){--tw-space-x-reverse:0;margin-right:calc(0.5rem * var(--tw-space-x-reverse));margin-left:calc(0.5rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-4 > :not([hidden]) ~ :not([hidden]){--tw-space-x-reverse:0;margin-right:calc(1rem * var(--tw-space-x-reverse));margin-left:calc(1rem * calc(1 - var(--tw-space-x-reverse)))}.space-y-1 > :not([hidden]) ~ :not([hidden]){--tw-space-y-reverse:0;margin-top:calc(0.25rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(0.25rem * var(--tw-space-y-reverse))}.rounded-full{border-radius:9999px}.rounded-lg{border-radius:0.5rem}.border{border-width:1px}.border-l-4{border-left-width:4px}.border-gray-300{--tw-border-opacity:1;border-color:rgb(209 213 219 / var(--tw-border-opacity, 1))}.border-red-400{--tw-border-opacity:1;border-color:rgb(248 113 113 / var(--tw-border-opacity, 1))}.bg-gray-50{--tw-bg-opacity:1;background-color:rgb(249 250 251 / var(--tw-bg-opacity, 1))}.bg-gray-800{--tw-bg-opacity:1;background-color:rgb(31 41 55 / var(--tw-bg-opacity, 1))}.bg-primary{--tw-bg-opacity:1;background-color:rgb(93 92 222 / var(--tw-bg-opacity, 1))}.bg-red-50{--tw-bg-opacity:1;background-color:rgb(254 242 242 / var(--tw-bg-opacity, 1))}.bg-red-500{--tw-bg-opacity:1;background-color:rgb(239 68 68 / var(--tw-bg-opacity, 1))}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255 / var(--tw-bg-opacity, 1))}.p-4{padding:1rem}.p-6{padding:1.5rem}.px-3{padding-left:0.75rem;padding-right:0.75rem}.px-4{padding-left:1rem;padding-right:1rem}.py-1{padding-top:0.25rem;padding-bottom:0.25rem}.py-12{padding-top:3rem;padding-bottom:3rem}.py-2{padding-top:0.5rem;padding-bottom:0.5rem}.py-6{padding-top:1.5rem;padding-bottom:1.5rem}.py-8{padding-top:2rem;padding-bottom:2rem}.pl-5{padding-left:1.25rem}.text-center{text-align:center}.text-2xl{font-size:1.5rem;line-height:2rem}.text-base{font-size:1rem;line-height:1.5rem}.text-sm{font-size:0.875rem;line-height:1.25rem}.text-xl{font-size:1.25rem;line-height:1.75rem}.font-bold{font-weight:700}.font-medium{font-weight:500}.font-semibold{font-weight:600}.text-gray-400{--tw-text-opacity:1;color:rgb(156 163 175 / var(--tw-text-opacity, 1))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128 / var(--tw-text-opacity, 1))}.text-gray-900{--tw-text-opacity:1;color:rgb(17 24 39 / var(--tw-text-opacity, 1))}.text-primary{--tw-text-opacity:1;color:rgb(93 92 222 / var(--tw-text-opacity, 1))}.text-red-400{--tw-text-opacity:1;color:rgb(248 113 113 / var(--tw-text-opacity, 1))}.text-red-700{--tw-text-opacity:1;color:rgb(185 28 28 / var(--tw-text-opacity, 1))}.text-red-800{--tw-text-opacity:1;color:rgb(153 27 27 / var(--tw-text-opacity, 1))}.text-white{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity, 1))}.shadow-lg{--tw-shadow:0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.shadow-sm{--tw-shadow:0 1px 2px 0 rgb(0 0 0 / 0.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.transition-colors{transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, -webkit-text-decoration-color;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}.hover\:bg-gray-50:hover{--tw-bg-opacity:1;background-color:rgb(249 250 251 / var(--tw-bg-opacity, 1))}.hover\:bg-gray-700:hover{--tw-bg-opacity:1;background-color:rgb(55 65 81 / var(--tw-bg-opacity, 1))}.hover\:bg-purple-700:hover{--tw-bg-opacity:1;background-color:rgb(126 34 206 / var(--tw-bg-opacity, 1))}.focus\:border-transparent:focus{border-color:transparent}.focus\:ring-2:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.focus\:ring-primary:focus{--tw-ring-opacity:1;--tw-ring-color:rgb(93 92 222 / var(--tw-ring-opacity, 1))}.dark\:border-gray-600:is(.dark *){--tw-border-opacity:1;border-color:rgb(75 85 99 / var(--tw-border-opacity, 1))}.dark\:bg-gray-700:is(.dark *){--tw-bg-opacity:1;background-color:rgb(55 65 81 / var(--tw-bg-opacity, 1))}.dark\:bg-gray-800:is(.dark *){--tw-bg-opacity:1;background-color:rgb(31 41 55 / var(--tw-bg-opacity, 1))}.dark\:bg-gray-900:is(.dark *){--tw-bg-opacity:1;background-color:rgb(17 24 39 / var(--tw-bg-opacity, 1))}.dark\:bg-red-900\/20:is(.dark *){background-color:rgb(127 29 29 / 0.2)}.dark\:text-gray-100:is(.dark *){--tw-text-opacity:1;color:rgb(243 244 246 / var(--tw-text-opacity, 1))}.dark\:text-gray-400:is(.dark *){--tw-text-opacity:1;color:rgb(156 163 175 / var(--tw-text-opacity, 1))}.dark\:text-red-200:is(.dark *){--tw-text-opacity:1;color:rgb(254 202 202 / var(--tw-text-opacity, 1))}.dark\:text-red-300:is(.dark *){--tw-text-opacity:1;color:rgb(252 165 165 / var(--tw-text-opacity, 1))}.dark\:text-white:is(.dark *){--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity, 1))}@media (min-width: 640px){.sm\:px-6{padding-left:1.5rem;padding-right:1.5rem}}@media (min-width: 768px){.md\:grid-cols-2{grid-template-columns:repeat(2, minmax(0, 1fr))}.md\:grid-cols-3{grid-template-columns:repeat(3, minmax(0, 1fr))}}@media (min-width: 1024px){.lg\:grid-cols-3{grid-template-columns:repeat(3, minmax(0, 1fr))}.lg\:px-8{padding-left:2rem;padding-right:2rem}}</style></head>
<body class="h-full bg-white dark:bg-gray-900 text-gray-900 dark:text-white">
    <div class="min-h-full">
        <!-- Header -->
        <header class="bg-primary shadow-sm">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center py-6">
                    <h1 class="text-2xl font-bold text-white">WAR ROOM Order Trend Tracker</h1>
                    <div class="flex items-center space-x-4">
                        <span id="dueOrdersCount" class="bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold hidden">
                            0 Due Orders
                        </span>
                        <button id="addClientBtn" class="bg-white text-primary px-4 py-2 rounded-lg font-semibold hover:bg-gray-50 transition-colors">
                            + Add Client
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Add Client Form -->
            <div id="addClientForm" class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-8 hidden">
                <h2 class="text-xl font-semibold mb-4">Add New Client</h2>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Client Name</label>
                        <input id="clientName" type="text" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent bg-white dark:bg-gray-700 text-base" placeholder="Enter client name">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">First Order Date</label>
                        <input id="firstOrderDate" type="date" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent bg-white dark:bg-gray-700 text-base">
                    </div>
                    <div class="flex items-end">
                        <button id="saveClientBtn" class="w-full bg-primary text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors font-semibold">
                            Save Client
                        </button>
                    </div>
                </div>
            </div>

            <!-- Due Orders Alert -->
            <div id="alertsSection" class="mb-8 hidden">
                <div class="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-400 p-4 rounded-lg">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-red-800 dark:text-red-200">Orders Due Soon</h3>
                            <div class="mt-2 text-sm text-red-700 dark:text-red-300">
                                <ul id="dueOrdersList" class="list-disc pl-5 space-y-1"></ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Clients Grid -->
            <div id="clientsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 hidden">
                <!-- Clients will be populated here -->
            </div>

            <!-- Empty State -->
            <div id="emptyState" class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-gray-100">No clients yet</h3>
                <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Get started by adding your first client to track their ordering patterns.</p>
            </div>
        </main>
    </div>

    <!-- Copy Code Button -->
    <div id="copyCodeContainer" class="fixed top-4 right-4 z-50">
        <button id="copyCodeBtn" class="bg-gray-800 hover:bg-gray-700 text-white px-4 py-2 rounded-lg shadow-lg transition-colors flex items-center space-x-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
            <span>Copy App Code</span>
        </button>
    </div>

    <script>
        // Copy Code Functionality
        document.getElementById('copyCodeBtn').addEventListener('click', function() {
            const htmlCode = document.documentElement.outerHTML;
            navigator.clipboard.writeText(htmlCode).then(function() {
                const btn = document.getElementById('copyCodeBtn');
                const originalText = btn.innerHTML;
                btn.innerHTML = `
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <span>Copied!</span>
                `;
                btn.classList.add('bg-green-600', 'hover:bg-green-500');
                btn.classList.remove('bg-gray-800', 'hover:bg-gray-700');
                
                setTimeout(() => {
                    btn.innerHTML = originalText;
                    btn.classList.remove('bg-green-600', 'hover:bg-green-500');
                    btn.classList.add('bg-gray-800', 'hover:bg-gray-700');
                }, 2000);
            }).catch(function() {
                alert('Could not copy code. Please manually select and copy the code from the browser source.');
            });
        });

        // Dark mode setup
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (event.matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        });

        // App State
        let clients = [];
        let nextId = 1;

        // DOM Elements
        const addClientBtn = document.getElementById('addClientBtn');
        const addClientForm = document.getElementById('addClientForm');
        const saveClientBtn = document.getElementById('saveClientBtn');
        const clientsGrid = document.getElementById('clientsGrid');
        const emptyState = document.getElementById('emptyState');
        const alertsSection = document.getElementById('alertsSection');
        const dueOrdersList = document.getElementById('dueOrdersList');
        const dueOrdersCount = document.getElementById('dueOrdersCount');

        // Event Listeners
        addClientBtn.addEventListener('click', toggleAddForm);
        saveClientBtn.addEventListener('click', saveClient);

        function toggleAddForm() {
            addClientForm.classList.toggle('hidden');
            if (!addClientForm.classList.contains('hidden')) {
                document.getElementById('clientName').focus();
                // Set today as default date
                document.getElementById('firstOrderDate').value = new Date().toISOString().split('T')[0];
            }
        }

        function saveClient() {
            const name = document.getElementById('clientName').value.trim();
            const firstOrderDate = document.getElementById('firstOrderDate').value;

            if (!name) {
                alert('Please enter a client name');
                return;
            }
            if (!firstOrderDate) {
                alert('Please enter the first order date');
                return;
            }

            const client = {
                id: nextId++,
                name,
                orders: [new Date(firstOrderDate)],
                averageDaysBetweenOrders: null,
                nextPredictedOrder: null,
                status: 'new' // new, active, overdue
            };

            clients.push(client);
            clearForm();
            addClientForm.classList.add('hidden');
            renderClients();
            updateAlerts();
        }

        function clearForm() {
            document.getElementById('clientName').value = '';
            document.getElementById('firstOrderDate').value = '';
        }

        function addOrder(clientId) {
            const client = clients.find(c => c.id === clientId);
            if (!client) return;

            const today = new Date();
            client.orders.push(today);
            client.orders.sort((a, b) => a - b); // Sort chronologically
            
            calculateTrend(client);
            renderClients();
            updateAlerts();
        }

        function calculateTrend(client) {
            if (client.orders.length < 2) {
                client.averageDaysBetweenOrders = null;
                client.nextPredictedOrder = null;
                client.status = 'new';
                return;
            }

            // Calculate days between each order
            const daysBetweenOrders = [];
            for (let i = 1; i < client.orders.length; i++) {
                const days = Math.round((client.orders[i] - client.orders[i-1]) / (1000 * 60 * 60 * 24));
                daysBetweenOrders.push(days);
            }

            // Calculate average
            client.averageDaysBetweenOrders = Math.round(
                daysBetweenOrders.reduce((sum, days) => sum + days, 0) / daysBetweenOrders.length
            );

            // Predict next order date
            const lastOrderDate = client.orders[client.orders.length - 1];
            client.nextPredictedOrder = new Date(lastOrderDate.getTime() + (client.averageDaysBetweenOrders * 24 * 60 * 60 * 1000));

            // Determine status
            const today = new Date();
            const daysSinceLastOrder = Math.round((today - lastOrderDate) / (1000 * 60 * 60 * 24));
            
            if (daysSinceLastOrder > client.averageDaysBetweenOrders + 3) {
                client.status = 'overdue';
            } else if (daysSinceLastOrder >= client.averageDaysBetweenOrders - 3) {
                client.status = 'due-soon';
            } else {
                client.status = 'active';
            }
        }

        function renderClients() {
            if (clients.length === 0) {
                emptyState.classList.remove('hidden');
                clientsGrid.classList.add('hidden');
                return;
            }

            emptyState.classList.add('hidden');
            clientsGrid.classList.remove('hidden');

            clientsGrid.innerHTML = clients.map(client => {
                // Recalculate trend for each render
                calculateTrend(client);
                
                const statusColors = {
                    'new': 'blue',
                    'active': 'green',
                    'due-soon': 'yellow',
                    'overdue': 'red'
                };
                
                const statusLabels = {
                    'new': 'New Client',
                    'active': 'On Track',
                    'due-soon': 'Due Soon',
                    'overdue': 'Overdue'
                };

                const statusColor = statusColors[client.status];
                const statusLabel = statusLabels[client.status];
                
                const lastOrder = client.orders[client.orders.length - 1];
                const daysSinceLastOrder = Math.round((new Date() - lastOrder) / (1000 * 60 * 60 * 24));
                
                return `
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
                        <div class="flex justify-between items-start mb-4">
                            <h3 class="text-lg font-semibold truncate">${client.name}</h3>
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${statusColor}-100 text-${statusColor}-800 dark:bg-${statusColor}-900 dark:text-${statusColor}-200">
                                ${statusLabel}
                            </span>
                        </div>
                        
                        <div class="space-y-3">
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-500 dark:text-gray-400">Total Orders:</span>
                                <span class="font-semibold">${client.orders.length}</span>
                            </div>
                            
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-500 dark:text-gray-400">Last Order:</span>
                                <span class="text-sm">${daysSinceLastOrder} days ago</span>
                            </div>
                            
                            ${client.averageDaysBetweenOrders ? `
                                <div class="flex justify-between items-center">
                                    <span class="text-sm text-gray-500 dark:text-gray-400">Order Frequency:</span>
                                    <span class="text-sm">Every ${client.averageDaysBetweenOrders} days</span>
                                </div>
                                
                                <div class="flex justify-between items-center">
                                    <span class="text-sm text-gray-500 dark:text-gray-400">Next Expected:</span>
                                    <span class="text-sm font-medium">${client.nextPredictedOrder.toLocaleDateString()}</span>
                                </div>
                            ` : ''}
                        </div>
                        
                        <div class="mt-4 flex space-x-2">
                            <button onclick="addOrder(${client.id})" class="flex-1 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-3 py-2 rounded-lg text-sm font-medium hover:bg-green-200 dark:hover:bg-green-800 transition-colors">
                                Record Order
                            </button>
                            <button onclick="viewHistory(${client.id})" class="flex-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-3 py-2 rounded-lg text-sm font-medium hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors">
                                View History
                            </button>
                        </div>
                        
                        <button onclick="deleteClient(${client.id})" class="mt-2 w-full text-red-600 dark:text-red-400 text-sm hover:text-red-800 dark:hover:text-red-200 transition-colors">
                            Delete Client
                        </button>
                    </div>
                `;
            }).join('');
        }

        function viewHistory(clientId) {
            const client = clients.find(c => c.id === clientId);
            if (!client) return;

            const historyText = client.orders
                .map((date, index) => {
                    const daysBetween = index > 0 ? 
                        Math.round((date - client.orders[index-1]) / (1000 * 60 * 60 * 24)) : 
                        null;
                    return `${index + 1}. ${date.toLocaleDateString()}${daysBetween ? ` (${daysBetween} days later)` : ''}`;
                })
                .join('\n');

            alert(`${client.name} Order History:\n\n${historyText}\n\nAverage: ${client.averageDaysBetweenOrders || 'N/A'} days between orders`);
        }

        function deleteClient(clientId) {
            if (confirm('Are you sure you want to delete this client?')) {
                clients = clients.filter(c => c.id !== clientId);
                renderClients();
                updateAlerts();
            }
        }

        function updateAlerts() {
            const dueClients = clients.filter(client => 
                client.status === 'due-soon' || client.status === 'overdue'
            );
            
            if (dueClients.length > 0) {
                alertsSection.classList.remove('hidden');
                dueOrdersCount.classList.remove('hidden');
                dueOrdersCount.textContent = `${dueClients.length} Due Orders`;
                
                dueOrdersList.innerHTML = dueClients.map(client => {
                    const daysOverdue = client.nextPredictedOrder ? 
                        Math.round((new Date() - client.nextPredictedOrder) / (1000 * 60 * 60 * 24)) : 0;
                    const statusText = client.status === 'overdue' ? 
                        `${daysOverdue} days overdue` : 
                        'due soon';
                    return `<li><strong>${client.name}</strong>: ${statusText}</li>`;
                }).join('');
            } else {
                alertsSection.classList.add('hidden');
                dueOrdersCount.classList.add('hidden');
            }
        }

        // Initialize
        renderClients();
        
        // Update calculations every hour
        setInterval(() => {
            renderClients();
            updateAlerts();
        }, 3600000);
    </script>


</body></html>
