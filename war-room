<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WAR ROOM Order Trend Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#5D5CDE',
                    }
                }
            },
            darkMode: 'class'
        }
    </script>
</head>
<body class="h-full bg-white dark:bg-gray-900 text-gray-900 dark:text-white">
    <div class="min-h-full">
        <!-- Header -->
        <header class="bg-primary shadow-sm">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center py-6">
                    <h1 class="text-2xl font-bold text-white">WAR ROOM Order Trend Tracker</h1>
                    <div class="flex items-center space-x-4">
                        <span id="dueOrdersCount" class="bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold hidden">
                            0 Due Orders
                        </span>
                        <button id="addClientBtn" class="bg-white text-primary px-4 py-2 rounded-lg font-semibold hover:bg-gray-50 transition-colors">
                            + Add Client
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Add Client Form -->
            <div id="addClientForm" class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-8 hidden">
                <h2 class="text-xl font-semibold mb-4">Add New Client</h2>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Client Name</label>
                        <input id="clientName" type="text" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent bg-white dark:bg-gray-700 text-base" placeholder="Enter client name">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">First Order Date</label>
                        <input id="firstOrderDate" type="date" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent bg-white dark:bg-gray-700 text-base">
                    </div>
                    <div class="flex items-end">
                        <button id="saveClientBtn" class="w-full bg-primary text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors font-semibold">
                            Save Client
                        </button>
                    </div>
                </div>
            </div>

            <!-- Due Orders Alert -->
            <div id="alertsSection" class="mb-8 hidden">
                <div class="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-400 p-4 rounded-lg">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-red-800 dark:text-red-200">Orders Due Soon</h3>
                            <div class="mt-2 text-sm text-red-700 dark:text-red-300">
                                <ul id="dueOrdersList" class="list-disc pl-5 space-y-1"></ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Clients Grid -->
            <div id="clientsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Clients will be populated here -->
            </div>

            <!-- Empty State -->
            <div id="emptyState" class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-gray-100">No clients yet</h3>
                <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Get started by adding your first client to track their ordering patterns.</p>
            </div>
        </main>
    </div>

    <script>
        // Dark mode setup
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (event.matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        });

        // App State
        let clients = [];
        let nextId = 1;

        // DOM Elements
        const addClientBtn = document.getElementById('addClientBtn');
        const addClientForm = document.getElementById('addClientForm');
        const saveClientBtn = document.getElementById('saveClientBtn');
        const clientsGrid = document.getElementById('clientsGrid');
        const emptyState = document.getElementById('emptyState');
        const alertsSection = document.getElementById('alertsSection');
        const dueOrdersList = document.getElementById('dueOrdersList');
        const dueOrdersCount = document.getElementById('dueOrdersCount');

        // Event Listeners
        addClientBtn.addEventListener('click', toggleAddForm);
        saveClientBtn.addEventListener('click', saveClient);

        function toggleAddForm() {
            addClientForm.classList.toggle('hidden');
            if (!addClientForm.classList.contains('hidden')) {
                document.getElementById('clientName').focus();
                // Set today as default date
                document.getElementById('firstOrderDate').value = new Date().toISOString().split('T')[0];
            }
        }

        function saveClient() {
            const name = document.getElementById('clientName').value.trim();
            const firstOrderDate = document.getElementById('firstOrderDate').value;

            if (!name) {
                alert('Please enter a client name');
                return;
            }
            if (!firstOrderDate) {
                alert('Please enter the first order date');
                return;
            }

            const client = {
                id: nextId++,
                name,
                orders: [new Date(firstOrderDate)],
                averageDaysBetweenOrders: null,
                nextPredictedOrder: null,
                status: 'new' // new, active, overdue
            };

            clients.push(client);
            clearForm();
            addClientForm.classList.add('hidden');
            renderClients();
            updateAlerts();
        }

        function clearForm() {
            document.getElementById('clientName').value = '';
            document.getElementById('firstOrderDate').value = '';
        }

        function addOrder(clientId) {
            const client = clients.find(c => c.id === clientId);
            if (!client) return;

            const today = new Date();
            client.orders.push(today);
            client.orders.sort((a, b) => a - b); // Sort chronologically
            
            calculateTrend(client);
            renderClients();
            updateAlerts();
        }

        function calculateTrend(client) {
            if (client.orders.length < 2) {
                client.averageDaysBetweenOrders = null;
                client.nextPredictedOrder = null;
                client.status = 'new';
                return;
            }

            // Calculate days between each order
            const daysBetweenOrders = [];
            for (let i = 1; i < client.orders.length; i++) {
                const days = Math.round((client.orders[i] - client.orders[i-1]) / (1000 * 60 * 60 * 24));
                daysBetweenOrders.push(days);
            }

            // Calculate average
            client.averageDaysBetweenOrders = Math.round(
                daysBetweenOrders.reduce((sum, days) => sum + days, 0) / daysBetweenOrders.length
            );

            // Predict next order date
            const lastOrderDate = client.orders[client.orders.length - 1];
            client.nextPredictedOrder = new Date(lastOrderDate.getTime() + (client.averageDaysBetweenOrders * 24 * 60 * 60 * 1000));

            // Determine status
            const today = new Date();
            const daysSinceLastOrder = Math.round((today - lastOrderDate) / (1000 * 60 * 60 * 24));
            
            if (daysSinceLastOrder > client.averageDaysBetweenOrders + 3) {
                client.status = 'overdue';
            } else if (daysSinceLastOrder >= client.averageDaysBetweenOrders - 3) {
                client.status = 'due-soon';
            } else {
                client.status = 'active';
            }
        }

        function renderClients() {
            if (clients.length === 0) {
                emptyState.classList.remove('hidden');
                clientsGrid.classList.add('hidden');
                return;
            }

            emptyState.classList.add('hidden');
            clientsGrid.classList.remove('hidden');

            clientsGrid.innerHTML = clients.map(client => {
                // Recalculate trend for each render
                calculateTrend(client);
                
                const statusColors = {
                    'new': 'blue',
                    'active': 'green',
                    'due-soon': 'yellow',
                    'overdue': 'red'
                };
                
                const statusLabels = {
                    'new': 'New Client',
                    'active': 'On Track',
                    'due-soon': 'Due Soon',
                    'overdue': 'Overdue'
                };

                const statusColor = statusColors[client.status];
                const statusLabel = statusLabels[client.status];
                
                const lastOrder = client.orders[client.orders.length - 1];
                const daysSinceLastOrder = Math.round((new Date() - lastOrder) / (1000 * 60 * 60 * 24));
                
                return `
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
                        <div class="flex justify-between items-start mb-4">
                            <h3 class="text-lg font-semibold truncate">${client.name}</h3>
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${statusColor}-100 text-${statusColor}-800 dark:bg-${statusColor}-900 dark:text-${statusColor}-200">
                                ${statusLabel}
                            </span>
                        </div>
                        
                        <div class="space-y-3">
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-500 dark:text-gray-400">Total Orders:</span>
                                <span class="font-semibold">${client.orders.length}</span>
                            </div>
                            
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-500 dark:text-gray-400">Last Order:</span>
                                <span class="text-sm">${daysSinceLastOrder} days ago</span>
                            </div>
                            
                            ${client.averageDaysBetweenOrders ? `
                                <div class="flex justify-between items-center">
                                    <span class="text-sm text-gray-500 dark:text-gray-400">Order Frequency:</span>
                                    <span class="text-sm">Every ${client.averageDaysBetweenOrders} days</span>
                                </div>
                                
                                <div class="flex justify-between items-center">
                                    <span class="text-sm text-gray-500 dark:text-gray-400">Next Expected:</span>
                                    <span class="text-sm font-medium">${client.nextPredictedOrder.toLocaleDateString()}</span>
                                </div>
                            ` : ''}
                        </div>
                        
                        <div class="mt-4 flex space-x-2">
                            <button onclick="addOrder(${client.id})" class="flex-1 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-3 py-2 rounded-lg text-sm font-medium hover:bg-green-200 dark:hover:bg-green-800 transition-colors">
                                Record Order
                            </button>
                            <button onclick="viewHistory(${client.id})" class="flex-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-3 py-2 rounded-lg text-sm font-medium hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors">
                                View History
                            </button>
                        </div>
                        
                        <button onclick="deleteClient(${client.id})" class="mt-2 w-full text-red-600 dark:text-red-400 text-sm hover:text-red-800 dark:hover:text-red-200 transition-colors">
                            Delete Client
                        </button>
                    </div>
                `;
            }).join('');
        }

        function viewHistory(clientId) {
            const client = clients.find(c => c.id === clientId);
            if (!client) return;

            const historyText = client.orders
                .map((date, index) => {
                    const daysBetween = index > 0 ? 
                        Math.round((date - client.orders[index-1]) / (1000 * 60 * 60 * 24)) : 
                        null;
                    return `${index + 1}. ${date.toLocaleDateString()}${daysBetween ? ` (${daysBetween} days later)` : ''}`;
                })
                .join('\n');

            alert(`${client.name} Order History:\n\n${historyText}\n\nAverage: ${client.averageDaysBetweenOrders || 'N/A'} days between orders`);
        }

        function deleteClient(clientId) {
            if (confirm('Are you sure you want to delete this client?')) {
                clients = clients.filter(c => c.id !== clientId);
                renderClients();
                updateAlerts();
            }
        }

        function updateAlerts() {
            const dueClients = clients.filter(client => 
                client.status === 'due-soon' || client.status === 'overdue'
            );
            
            if (dueClients.length > 0) {
                alertsSection.classList.remove('hidden');
                dueOrdersCount.classList.remove('hidden');
                dueOrdersCount.textContent = `${dueClients.length} Due Orders`;
                
                dueOrdersList.innerHTML = dueClients.map(client => {
                    const daysOverdue = client.nextPredictedOrder ? 
                        Math.round((new Date() - client.nextPredictedOrder) / (1000 * 60 * 60 * 24)) : 0;
                    const statusText = client.status === 'overdue' ? 
                        `${daysOverdue} days overdue` : 
                        'due soon';
                    return `<li><strong>${client.name}</strong>: ${statusText}</li>`;
                }).join('');
            } else {
                alertsSection.classList.add('hidden');
                dueOrdersCount.classList.add('hidden');
            }
        }

        // Initialize
        renderClients();
        
        // Update calculations every hour
        setInterval(() => {
            renderClients();
            updateAlerts();
        }, 3600000);
    </script>
</body>
</html>
